{%- from "freeipa/map.jinja" import server, ipa_servers with context -%}
options {
    version "hidden";
    // turns on IPv6 for port 53, IPv4 is on by default for all ifaces
    listen-on-v6 {any;};

    // Put files that named is allowed to write in the data/ directory:
    directory "/var/named"; // the default
    dump-file           "data/cache_dump.db";
    statistics-file     "data/named_stats.txt";
    memstatistics-file  "data/named_mem_stats.txt";

    forward {{ server.get('dns', {}).get('forward', 'first') }};
    forwarders { 
        {%- for forwarder in server.get('dns', {}).get('forwarders', []) %}
        {{ forwarder }};
        {%- endfor %}
    };

    // Any host is permitted to issue recursive queries
    allow-recursion { {{ server.get('dns', {}).get('recursion', 'localhost') }}; };

    tkey-gssapi-keytab "/etc/named.keytab";
    pid-file "/run/named/named.pid";

    dnssec-enable {% if server.get('dns', {}).get('dnssec', {}).get('enable', True) %}yes{% else %}no{% endif %};
    dnssec-validation {% if server.get('dns', {}).get('dnssec', {}).get('validation', True) %}yes{% else %}no{% endif %};

    /* Path to ISC DLV key */
    bindkeys-file "/etc/named.iscdlv.key";

    managed-keys-directory "/var/named/dynamic";
};

/* If you want to enable debugging, eg. using the 'rndc trace' command,
 * By default, SELinux policy does not allow named to modify the /var/named directory,
 * so put the default debug log file in data/ :
 */
logging {
    channel default_debug {
        file "data/named.run";
        severity dynamic;
        print-time yes;
    };
};

zone "." IN {
    type hint;
    file "named.ca";
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";

{%- if server.hostname is defined %}
{%- set hostname = server.hostname %}
{%- else %}
{%- set hostname = grains['fqdn'] %}
{%- endif %}

dyndb "ipa" "/usr/lib64/bind/ldap.so" {
    uri "ldapi://%2fvar%2frun%2fslapd-{{ server.realm|replace('.', '-') }}.socket";
    base "cn=dns, dc={{ server.domain|replace('.', ',dc=') }}";
    server_id "{{ hostname }}";
    auth_method "sasl";
    sasl_mech "GSSAPI";
    sasl_user "DNS/{{ hostname }}";
};

{%- for keyname, key in server.get('dns', {}).get('key', {}).iteritems() %}
key "{{ keyname }}" {
    algorithm {{ key.algorithm }};
    secret "{{ key.secret }}";
};
{%- endfor %}
